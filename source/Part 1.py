def bit_not(num: int, size: int = None) -> int:
    if size is None:
        return num ^ ((1 << num.bit_length()) - 1)
    else:
        return num ^ ((1 << size) - 1)


def task1():
    """
    С клавиатуры вводится 32-х разрядное целое число a в двоичной системе
    счисления.
        1. Вывести k −ый бит числа a. Номер бита предварительно запросить у пользователя.
        2. Установить/снять k −ый бит числа a.
        3. Поменять местами i −ый и j −ый биты в числе a. Числа i и j предварительно запросить у пользователя.
        4. Обнулить младшие m бит.
    """
    print('Введите число в двоичной системе счисления')
    try:
        a = int(input(), 2)
    except ValueError:
        print('Введенное число содержит недопустимые символы')
        return

    print('Введите номер бита')
    k = int(input()) - 1
    print(f'k-ый бит {bin((a >> k) & 1)[2:]}')

    print(f'{bin(a)[2:]}')
    print(f'{bin(a & ~(1 << k))[2:]}')
    print(f'{bin(a | (1 << k))[2:]}')

    print('Введите номера битов')
    i, j = int(input('i = ')) - 1, int(input('j = ')) - 1
    b1, b2 = (a >> i) & 1, (a >> j) & 1
    x = b1 ^ b2
    x = (x << i) | (x << j)
    print(f'a = {bin(a)[2:]}\n{bin(a ^ x)[2:]}')

    print('Введите число младших битов')
    m = int(input('m = '))
    print(f'a = {bin(a)[2:]}\n{bin(a >> m << m)[2:]}')


def task2():
    """
    A) «Склеить» первые i битов с последними i битами из целого числа длиной len битов.
    Пример.
    Пусть есть 12-ти разрядное целое число, представленное в двоичной системе счисления 100011101101.
    «Склеим» первые 3 и последние 3 бита, получим 100101.
    B) Получить биты из целого числа длиной len битов, находящиеся между первыми i битами и последними i битами.
    Пример.
    Пусть есть 12-ти разрядное целое число, представленное в двоичной системе счисления 100011101101.
    Получим биты находящиеся между первыми 3 и последними 3 битами: 011101.
    """
    try:
        a = int(input('Введите число в двоичной системе '), 2)
    except ValueError:
        print('Введенное число содержит недопустимые символы')
        return
    i = int(input('Введите i '))
    res = (a >> (a.bit_length() - i) << i) | (a & ((1 << i) - 1))
    print(f'{bin(res)[2:]}')

    mask = ((1 << (a.bit_length() - 2 * i)) - 1) << i
    # print(bin(mask))
    s = bin((a & mask) >> i)[2:]
    s = '0' * (a.bit_length() - 2 * i - len(s)) + s
    print(s)


def task3():
    """Поменять местами байты в заданном 32-х разрядном целом числе. Перестановка задается пользователем."""
    # 11111111000000001010101010011001
    try:
        a = int(input('Введите число в двоичной системе '), 2)
    except ValueError:
        print('Введенное число содержит недопустимые символы')
        return
    i = int(input('Введите i = '))
    j = int(input('Введите j = '))
    if i > 4 or j > 4 or i < 1 or j < 1:
        print('Некорректный номер байта')

    # byte = (1 << 8) - 1
    # bi = (a >> 8 * (i - 1)) & byte
    # bj = (a >> 8 * (j - 1)) & byte
    # bi <<= 8 * (j - 1)
    # bj <<= 8 * (i - 1)
    # mask = ((1 << 32) - 1) & bit_not(((1 << 8) - 1) << (8 * (i - 1)), 32) & \
    #        bit_not(((1 << 8) - 1) << (8 * (j - 1)), 32)
    # res = a & mask | bi | bj
    a = bytearray(a.to_bytes(4, byteorder='big'))
    t = a[i - 1]
    a[i - 1] = a[j - 1]
    a[j - 1] = t
    res = int.from_bytes(a, byteorder='big', signed=False)
    print('Result', bin(res)[2:])


def task4():
    a = 0b11000
    print(bin(a).rindex('1'))


def task5():
    """Пусть x целое число. Найти такое p, что 2**p ≤ x ≤ 2**(p+1)"""
    x = 255
    p = x.bit_length() - 1
    print(p)  # , (1 << p) <= x <= (1 << (p + 1)))


def task6():
    """ «Поксорить» все биты этого числа друг с другом"""
    x = 0b1010101
    while (bl := x.bit_length()) != 1 and x != 0:
        bl //= 2
        t = x & ((1 << bl) - 1)
        x = t ^ (x >> bl)
    print('Result', x)


def task7():
    """Написать макросы циклического сдвига в 2**p разрядном целом числе на n бит влево и вправо"""


if __name__ == '__main__':
    task6()
